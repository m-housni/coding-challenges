"""
## Highly divisible triangular number
* The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first * ten terms would be:
* 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
* Let us list the factors of the first seven triangle numbers:
*  1: 1
*  3: 1,3
*  6: 1,2,3,6
* 10: 1,2,5,10
* 15: 1,3,5,15
* 21: 1,3,7,21
* 28: 1,2,4,7,14,28
* We can see that 28 is the first triangle number to have over five divisors.
* What is the value of the first triangle number to have over five hundred divisors?

Result: [41040, 842161320]


n: number of divisors

1+2+...+n = = n(n+1)/2 

p<q => p2<pq => p<Vn

n = pq


"""

import math

def divisors(number):
  divisors = [1]
  for i in range(1,math.ceil(math.sqrt(number))):
    if(number%i == 0):
      divisors.append(i)
  divisors.append(number)
  return len(divisors)

def hDivTrianNum(n):
  trian = 1
  nth = 2
  while divisors(trian)<n:
    trian += nth
    nth += 1

  return [nth-1,trian]


print(hDivTrianNum(500))
